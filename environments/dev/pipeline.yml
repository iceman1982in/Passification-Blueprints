trigger: #none
# Push trigger specifies which branches cause a continuous integration build to run. If you specify no push trigger, pushes to any branch trigger a build. 
  branches:
    include:
      - main
      - master
      - feature/*
      - hotfix/*
      - dev
      - dev-test
      - bug/*
      - release/*
  paths:
    include:
      - environments/dev/*


pool:
  vmimage: 'windows-2019'

variables:
- template: pipeline_variable.yml  # Template reference

stages:
 - stage: 'Build'
   displayName: 'Initialize Build'
   jobs: 
   - job: Initialize_Build
     steps:      

      -  task: CopyFiles@2
         inputs:
          SourceFolder: './modules'
          Contents: '**'
          TargetFolder: '$(build.artifactstagingdirectory)/modules' 
              
      -  task: CopyFiles@2
         inputs:
          SourceFolder: './environments/$(environment)'
          Contents: '**'
          TargetFolder: '$(build.artifactstagingdirectory)/environments/$(environment)'    

      - task: CopyFiles@2
        inputs:
          SourceFolder: './terraform'
          Contents: '**'
          TargetFolder: '$(build.artifactstagingdirectory)/terraform'     

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.artifactstagingdirectory)'
          artifact: 'Infra'
          publishLocation: 'pipeline'  
      
 - stage: 'Admin_Setup'
   displayName: Admin Setup
   dependsOn: 'Build'
   jobs:
     - job: Prepare_AdminSetup
       steps:
        - task: AzureCLI@1
          displayName: 'Create Admin Resource Group and Storage acct'
          inputs:
            azureSubscription: $(serviceConnection)
            scriptLocation: inlineScript
            inlineScript: |            
                call az group create --location $(location) --name $(terraformstoragerg)

                call az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --location $(location) --sku Standard_LRS --min-tls-version TLS1_2

                call az storage container create --name $(environment) --account-name $(terraformstorageaccount)

                call az storage account keys list -g $(terraformstoragerg) -n $(terraformstorageaccount)
            
        - task: AzurePowerShell@3
          displayName: 'Get storage key'
          inputs:
              azureSubscription:  $(serviceConnection)
              ScriptType: InlineScript
              azurePowerShellVersion: 'LatestVersion'
              Inline: |
                  # Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account
                  $key=(Get-AzureRmStorageAccountKey -ResourceGroupName $(terraformstoragerg) -AccountName $(terraformstorageaccount)).Value[0]
                  Write-Host "##vso[task.setvariable variable=storagekey]$key"      
          
            

        - task: DownloadPipelineArtifact@2
          inputs:
                  artifact: Infra
                  path: $(Build.Repository.LocalPath)/updatedterraform/
          displayName: 'Download Terraform files'     
     
        - task: PowerShell@2
          inputs:
            filePath: '$(System.DefaultWorkingDirectory)\ReplaceTokens.ps1'
            arguments: '-tf_storageacct $(terraformstorageaccount) -tf_containername $(terraform_containername) -tf_key "terraform.tfstate" -tf_storagekey $(storagekey)'


        - task: CopyFiles@2
          inputs:
                  SourceFolder: '$(Build.Repository.LocalPath)/updatedterraform'
                  Contents: '**'
                  TargetFolder: '$(build.artifactstagingdirectory)/updated'    
        
        - task: PublishPipelineArtifact@1
          inputs:
                targetPath: '$(build.artifactstagingdirectory)/updated'
                artifact: 'terraformupdated'
                publishLocation: 'pipeline'

 - stage: 'Prepare_Plan_Terraform'
   displayName: "Plan Terraform"
   dependsOn: 'Admin_Setup'
   jobs: 
      - job: Prepare_Terraform_1
        steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                  artifact: terraformupdated
                  path: $(Build.Repository.LocalPath)/terraform/
              displayName: 'Download Terraform'          
            


            - task:  ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
              displayName: ‘Install Latest Terraform’
              inputs:
                terraformVersion: 'latest'                
                           
              
            - task: TerraformTaskV3@3
              displayName: 'Terraform: Init'
              inputs:
                    command: 'init'
                    workingDirectory: '$(Build.Repository.LocalPath)/terraform/terraform'
                    backendServiceArm: $(serviceConnection)
                    backendAzureRmResourceGroupName: '$(terraformstoragerg)'
                    backendAzureRmStorageAccountName: '$(terraformstorageaccount) '
                    backendAzureRmContainerName: '$(environment)'
                    backendAzureRmKey: terraform.tfstate
            
            - task: TerraformTaskV3@3
              displayName: 'Terraform: Validate'
              inputs:
                provider: 'azurerm'
                command: 'validate'
        
            - task: TerraformTaskV3@3
              displayName: 'Terraform: Plan'
              inputs:
                provider: 'azurerm'
                command: 'plan'
                commandOptions: '-input=false -var-file="../environments/$(environment)/$(environment).tfvars" -out=$(Build.Repository.LocalPath)/terraform/tfplan '
                workingDirectory: '$(Build.Repository.LocalPath)/terraform/terraform'                
                environmentServiceNameAzureRM: $(serviceConnection)
                    
            - task: PublishPipelineArtifact@1
              inputs:
                targetPath: '$(Build.Repository.LocalPath)/terraform/tfplan'
                ArtifactName: tfplan
                artifactType: pipeline
              displayName: 'Publish Terraform plan'

            - task: PublishPipelineArtifact@1
              inputs:
                targetPath: '$(Build.Repository.LocalPath)/terraform/terraform/.terraform'
                artifactName: terraform init
              displayName: 'Publish Terraform init'
              enabled: true

            - task: PublishPipelineArtifact@1
              inputs:
                targetPath: '$(Build.Repository.LocalPath)/terraform/terraform/.terraform.lock.hcl'
                artifactName: terraform provider lock
              displayName: 'Publish Terraform Provider Lock File'
              enabled: true

#  -  stage: 'Plan_Approval'
#     displayName: Plan Approval
#     dependsOn: Prepare_Plan_Terraform
#     jobs:
#     -   job: waitForValidation
#         displayName: Wait for validation
#         pool: server    
#         timeoutInMinutes: 4320 # job times out in 3 days
#         steps:   
#             -   task: ManualValidation@0
#                 timeoutInMinutes: 1440 # task times out in 1 day
#                 inputs:
#                     instructions: 'Please check and validate Terraform Plan to apply the changes'
#                     onTimeout: 'reject'

 - stage: Terraform_Apply
   displayName: Terraform Apply
   dependsOn: 'Prepare_Plan_Terraform' #'Plan_Approval'
   jobs: 
      
      - deployment: Terraform_Apply
        environment: Terraform_ApplyOrDestroy
        strategy:
          runOnce:
            deploy:
              steps:
              # Setting checkout=self to force retrieval of source code for Microsoft hosted agents
              - checkout: self
              # Setting download=none to force explicit download of minimally required artifacts
              - download: none
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: terraformupdated
                  path: $(Build.Repository.LocalPath)/terraform/
                displayName: 'Download Terraform exe'

              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: terraform init
                  path: $(Build.Repository.LocalPath)/terraform/terraform/.terraform
                displayName: 'Download Terraform init'

              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: terraform provider lock
                  path: $(Build.Repository.LocalPath)/terraform/terraform
                displayName: 'Download Terraform Provider Lock File'

              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: tfplan
                  path: $(Build.Repository.LocalPath)/terraform/terraform
                displayName: 'Download Terraform plan'
              
              - task:  ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                displayName: ‘Install Latest Terraform’
                inputs:
                    terraformVersion: 'latest'     
              
              - task: TerraformTaskV3@3
                inputs:
                  provider: 'azurerm'
                  command: 'apply'
                  workingDirectory: '$(Build.Repository.LocalPath)/terraform/terraform'       
                  commandOptions: '-input=false -var-file="../environments/$(environment)/$(environment).tfvars" '
                  environmentServiceNameAzureRM: $(serviceConnection)

 